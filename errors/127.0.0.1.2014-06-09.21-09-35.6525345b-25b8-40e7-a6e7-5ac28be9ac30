(dp1
S'output'
p2
S"<type 'exceptions.AttributeError'> 'str' object has no attribute 'name'"
p3
sS'layer'
p4
S'/Users/mac/Documents/shareknowledge/applications/welcome/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a samples controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n## - call exposes all registered services (none by default)\n#########################################################################\n\nimport json\nimport logging\nfrom database_handler import *\nfrom tag_handler import *\n\nlog = logging.getLogger("h")\nlog.setLevel(logging.DEBUG)\n\nfrom ConstantDefinition import *\ntry:\n    import json\nexcept ImportError:\n    from gluon.contrib import simplejson as json\nfrom facebook import GraphAPI, GraphAPIError\nfrom gluon.contrib.login_methods.oauth20_account import OAuthAccount\n\n\n\ndef test_jquery():\n    return dict()\ndef test_tinyMCE():\n    return dict()\n\ndef test_facebook():\n    return dict()\n\ndef tag_handler():\n    import pdb;pdb.set_trace()\n    if not request.vars.tag_info: return \'\'\n    tag_list = question_tag_handler().get_all_tag_info_from_db()\n    tag_info = request.vars.tag_info.capitalize()\n    handle_tag_in_tag_tbl(tag_info)\n    selected = [m for m in tag_list if m.name.startswith(tag_info)]\n    return DIV(*[DIV(k,\n                     _onclick="jQuery(\'#month\').val(\'%s\')" % k,\n                     _onmouseover="this.style.backgroundColor=\'yellow\'",\n                     _onmouseout="this.style.backgroundColor=\'white\'"\n                     ) for k in selected])\n\n\n\ndef user():\n    return dict(form = auth())\n\ndef index():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n\n    if you need a simple wiki simple replace the two lines below with:\n    return auth.wiki()\n    """\n    #redirect(URL(r = request, f= \'blog\', args = 3))\n    user = auth.user\n    print user\n    return dict()\n\n\ndef question():\n    """\n    Display blog by id\n    """\n    if request.env.REQUEST_METHOD == \'POST\':\n        create_new_answer(request, auth)\n        redirect(URL(r = request, f= \'question\', args = request.vars.question_id))\n    elif request.env.REQUEST_METHOD == \'GET\':\n        question = None\n        answer_list = []\n        try:\n            question = db(db.question_tbl.id == int(request.args[0])).select()[0]\n            try:\n                answer_list = db(db.answer_tbl.question_id == question.id).select()\n            except:\n                log.error(\'cant query answer db\')\n        except:\n            log.error(\'cant query a question from db\')\n            question = None\n        return dict(item = question, comment_list = answer_list)\n\n#@auth.requires_login()\ndef edit_question():\n    """\n    Edit blog\n    """\n    log.info("edit question")\n    import pdb; pdb.set_trace()\n    if request.env.REQUEST_METHOD == \'GET\':\n        question = db(db.question_tbl.id == request.args[0]).select()[0]\n        tag_list = question_tag_handler().get_tag_list_of_a_question(request.args[0])\n        return dict(question = question , tag_list = tag_list)\n    elif request.env.REQUEST_METHOD == \'POST\':\n        update_a_question(request, session.tag_list_store)\n        redirect(URL(r = request, f= \'question\', args = [request.args[0]]))\n\n    return dict()\n\n        \ndef delete_question():\n    selection = request.vars\n    if selection[\'selection\'] == "YES":\n        delete_a_question(request)\n        redirect(URL(r = request, f= \'question_list\'))\n    elif selection[\'selection\'] == "NO":\n        redirect(URL(r = request, f= \'question\', args = [request.args[0]]))\n    return dict()\n\n\ndef create_data_for_question_list_for_test():\n    user_id =  db.auth_user.insert(first_name = \'first_user\', email = \'first_user_email@gmail.com\')\n    auth.user = db(db.auth_user.id == user_id).select()[0]\n    for i in range(1,10,1):\n        question = "this is a new question " + str(i)\n        question_detail_info = "detail of question " + str(i)\n        question_id = question_handler(None,question, question_detail_info, user_id).create_new_record_in_question_tbl()\n\ndef question_list():\n    """\n    test data\n    """\n    question_list = db(db.question_tbl).select()\n    if not len(question_list):\n        create_data_for_question_list_for_test()\n    """\n    end test data\n    """\n    items= []\n\n\n    try:\n        items = db(db.question_tbl).select()\n\n    except:\n        log.error(\'cant query data from db\')\n    return dict(items= items, audience_id = \'1\')\n\ndef get_header(text):\n    """\n        get header of article\n    """\n    header_position =text.find("<p>&nbsp;</p>")\n    log.info("header_position = %d", header_position)\n    header_text =  request.vars.editor1[:header_position]\n    return header_text\n\n\n\n\n\n#@auth.requires_login()\ndef post():\n    log.info("request.vars = %s",request.vars)\n    session.tag_list_store = []\n    return dict(article_tag_list ="" )\n\n\n@auth.requires_login()\ndef post_tag():\n    session.tag_list_store.append(request.vars.tag_info)\n    log.info("session.tag list = %s", session.tag_list_store)\n    #return json.dumps(request.vars.tag_info)\n    return "var x=$(\'#target\'); x.html(x.html()+\' %s\');" % request.vars.tag_info.replace("\'","\\\\\'")\n\n\n@auth.requires_login()\ndef post_question():\n    log.info("post")\n    log.info("request.vars = %s",request.vars)\n    import pdb;pdb.set_trace()\n    question_id = post_new_question(request, auth, session)\n    if question_id:\n        redirect(URL(r = request, f= \'question\', args = question_id))\n    return dict()\n\n\n@auth.requires_login()\ndef user_modify_question():\n    update_a_question(request, session.tag_list_store)\n    return dict()\n\n\n####### answer ######\n\n@auth.requires_login()\ndef user_update_an_answer():\n    update_an_answer(request)\n    return dict()\n@auth.requires_login()\ndef user_del_an_answer():\n    del_an_answer(request)\n    return dict()\n\n\n##############################\n@auth.requires_login()\ndef like_a_question():\n    user_like_a_question(request, auth)\n    return dict()\n\n@auth.requires_login()\ndef unlike_a_question():\n    unlike_a_question(request, auth)\n    return dict()\n\n\n\n\n\n\n#those code is for manage meta data not using right now\n# using flickr for photo uploading\n@auth.requires_login()\ndef show_image():\n\n    image_data = db(db.pic_store).select()\n    #image = image_data.pic\n\n    form = SQLFORM(db.pic_store)\n    if form.process().accepted:\n        response.flash = \'movie info is posted\'\n    return dict(form = form)\n@auth.requires_login()\ndef manage_image():\n    grid = SQLFORM.smartgrid(db.pic_store)\n    return dict(grid=grid)\n\n@auth.requires_login()\ndef manage_article_tag():\n    grid = SQLFORM.smartgrid(db.article_tag)\n    return dict(grid=grid)\nresponse._vars=response._caller(tag_handler)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/Users/mac/Documents/shareknowledge/gluon/restricted.py", line 217, in restricted\n    exec ccode in environment\n  File "/Users/mac/Documents/shareknowledge/applications/welcome/controllers/default.py", line 241, in <module>\n  File "/Users/mac/Documents/shareknowledge/gluon/globals.py", line 372, in <lambda>\n    self._caller = lambda f: f()\n  File "/Users/mac/Documents/shareknowledge/applications/welcome/controllers/default.py", line 44, in tag_handler\n    selected = [m for m in tag_list if m.startswith(tag_info)]\nAttributeError: \'str\' object has no attribute \'name\'\n'
p11
s.