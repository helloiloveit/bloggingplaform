(dp1
S'output'
p2
S"<type 'exceptions.ValueError'> invalid literal for long() with base 10: '(null)'"
p3
sS'layer'
p4
S'/Users/huyheo/Documents/MovieReview_ServerSide/web2py/applications/welcome/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a samples controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n## - call exposes all registered services (none by default)\n#########################################################################\n\nimport json\nimport logging\n\nlog = logging.getLogger("h")\nlog.setLevel(logging.DEBUG)\n\nfrom ConstantDefinition import *\n\ndef user():\n    return dict(form = auth())\n\ndef index():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n\n    if you need a simple wiki simple replace the two lines below with:\n    return auth.wiki()\n    """\n    response.flash = T("Welcome to web2py!")\n    return dict(message=T(\'Hello World\'))\n\ndef json_test():\n    \n    movie_position_server = {}\n    data = {}\n    data_list = []\n    movie_list = db(db.movie.status.contains(ON_SCREEN)).select()\n    log.info("number of movie_list = %d",len(movie_list))\n    try:\n        #movie_list = db(db.movie).select()\n        #log.info("movie_list = %s",movie_list)\n        movie_list = db(db.movie.status.contains(ON_SCREEN)).select()\n        log.info("number of movie_list = %d",len(movie_list))\n    except:\n        log.error("Cant query movie from db")\n        return json.dumps([])\n\n    i = 1;\n    if len(movie_list):\n        for movie in movie_list:\n            data[\'name\']= movie.name\n            data[\'url\'] = URL_LOCAL_INFO +  URL(\'download\', args = movie.poster) \n            #data[\'url\']  = [movie.name,URL_GOOGLE_INFO + URL(\'download\', args = movie.poster) ]\n            data[\'id\'] = str(movie.id)\n            data[\'ratting\']= str(movie.ratting)\n            data_list.append(data)\n            data = {}\n            i = i + 1\n            \n    #data_group = [{\'type\':\'now\',"data":data},{\'type\':\'future\',"data":data}]\n    #data_group = [{\'type\':\'now\',"data":data}]\n    return json.dumps(data_list)\n\ndef test_query_gae():\n    log.info("test query gae")\n    print\'db\' , type(db)\n    print\'db.movie:%s\'%type(db.movie)\n    print\'db(db.movie) :%s\'% type(db(db.movie))\n    print\'db(db.movie).select:%s\\n\'%(db(db.movie).select)\n    movie_list = db(db.movie == 1).select(all)\n    print\'movie_list = \',len(movie_list)\n    return movie_list\n\ndef post_reply():\n    log.info(\'post reply \')\n    try:\n        content = request.vars[\'content\']\n        id      = request.vars[\'id\']\n    except:\n        log.error("Cant get variable from Front end")\n        return\n    print\' request.vars = \', request.vars\n    print\' id           = \', request.vars[\'id\']\n    print\' review       = \', request.vars[\'content\']\n    #update to database  \n    print\'update database \'\n    try:\n        reply_id = db.reply_tbl.insert(replyContent = content,\n                                   likeCount = 0,\n                                   hateCount = 0,\n                                   commentId  = id,\n                                    user_info = "",\n                                    syncStatus = 1)\n        #update comment Reply COunt\n        db(db.comment_tbl.id == id).update(likeCount = db.comment_tbl.replyCount + 1)\n        return json.dumps([reply_id])\n    except:\n        return json.dumps([])\n\n    \n\ndef post_comment():\n    print\'post comment \'\n    print\' request.vars = \', request.vars\n    print\' id           = \', request.vars[\'id\']\n    print\' ratting      = \', request.vars[\'ratting\']\n    print\' review       = \', request.vars[\'content\']\n    #update to database  \n    print\'update database \'\n    id = db.comment_tbl.insert(commentContent = request.vars[\'content\'],\n                                likeCount = 0,\n                                ratting = request.vars[\'ratting\'],\n                                replyCount = 0,\n                                movie = request.vars[\'id\'],\n                                syncStatus = 1)\n    print\' update successfully id :\',id\n    return json.dumps([id])\n\n\ndef add_data(comment):\n    try:\n        movie = db(db.movie.id == int(comment.movie)).select()[0]\n    except:\n        log.error("cant get movie %d from db",comment.movie)\n        return []\n\n    data = [ { COMMENT_ID:comment.id,\n                COMMENT_CONTENT: comment.commentContent,\n                COMMENT_LIKE:comment.likeCount,\n                COMMENT_RATING: comment.ratting,\n                COMMENT_REPLY: comment.replyCount,\n                USER_NAME:"huy",\n                USER_ID:"4",\n                MOVIE_ID:comment.movie,\n                MOVIE_NAME:movie.name\n            } ]\n    print\' data= \', data\n    return data\n    \n    \n\n\ndef get_comment_data():\n    log.info(\'get comment data\')\n    log.info(\'request.arg = %s \', request.args[0])\n    \n    if request.args[0] == ALL_MOVIE_TYPE:\n        log.info(" get comment of all movie");\n        log.debug(" get comment of all movie");\n        comment_list = db(db.comment_tbl).select()\n        log.debug(\'comment_list = %s\', comment_list)\n        if not len(comment_list):\n            return json.dumps([])\n        return_data = []\n        for comment in comment_list:\n            data = add_data(comment)\n            return_data.insert(0,data)\n        print\' return_data = \', return_data\n        data_group = [{\'type\':\'new\',"data":return_data},{\'type\':\'popular\',"data":[]}]\n        return json.dumps(data_group)\n\n    else:\n        log.info(" get comment of specific movie");\n        comment_list = db(db.comment_tbl.movie == int(request.args[0])).select()\n        log.debug(\'comment_list = %s\', comment_list)\n        if len(comment_list) >0:\n            return json.dumps([])\n        else:\n            data_group = []\n            return json.dumps(data_group)\n    """\n\n\n    data_test  = [data1, data2]\n    data_group = [{\'type\':\'new\',"data":data_test},{\'type\':\'popular\',"data":data2}]\n\n\n    return json.dumps(data_group)\n    """\n\ndef get_reply_data():\n    print\'get_reply_data\'\n    def add_data(reply):\n        try: \n            user = db(db.user.id == int(reply.user_info)).select()[0]\n        except:\n            log.error("cant get user from db")\n            return []\n\n        data = [ {  REPLY_ID: reply.id,\n                    REPLY_CONTENT: reply.replyContent,\n                    REPLY_LIKE: reply.likeCount,\n                    USER_NAME:user.name,\n                    USER_ID:user.id,\n                    COMMENT_ID: reply.comment\n                } ]\n        print \'data = \', data\n        return data\n    \n    print\'request.arg = \', request.args[0]\n    commentId = int(request.args[0])\n    try:\n        reply_list = db(db.reply_tbl.comment == commentId).select()\n        print\'reply_list = \', reply_list\n        if not len(reply_list):\n            return json.dumps([])\n        for reply in reply_list:\n            data = add_data(reply)\n            return_data.insert(0, data)\n        print \'return_data = \', return_data\n        data_group = [{\'type\':\'new\',"data":return_data},{\'type\':\'popular\',"data":[]}]\n        return json.dumps(data_group)\n\n    except:\n        log.error("cant get reply from db of comment %s", commentId)\n        return json.dumps([])\n    \n\n\n    """\n\n\n    data_test  = [data1, data2]\n    data_group = [{\'type\':\'new\',"data":data_test},{\'type\':\'popular\',"data":data2}]\n\n\n    return json.dumps(data_group)\n    """\n\ndef add_movie_to_db(movieName, moviePlot, movieTheater, movieTrailer, movieType, moviePoster):\n    try:\n        id = db.movie.insert(name = movieName, \n                            plot = moviePlot,\n                            theater = movieTheater, \n                            trailerUrl = movieTrailer, \n                            movieType = movieType, \n                            poster    = moviePoster)\n                            \n    except:\n        log.error(\'problem saving to db\')\n\n\n#@auth.requires_login() \ndef show_movie():\n    form = SQLFORM(db.movie)\n    if form.process().accepted:\n        response.flash = \'movie info is posted\'\n    return dict(form = form)\n\n#@auth.requires_login() \ndef show_schedule():\n    form = SQLFORM(db.schedule)\n    if form.process().accepted:\n        response.flash = \'schedule info is posted\'\n    return dict(form= form)\n\ndef show_theater():\n    form = SQLFORM(db.theater)\n    return dict(form = form)\n\ndef manage_schedule():\n    grid = SQLFORM.smartgrid(db.schedule, linked_tables= [\'movie\'])\n    return dict(grid=grid)\n \ndef manage_theater():\n    grid = SQLFORM.smartgrid(db.theater)\n    return dict(grid=grid)\n\ndef manage_movie():\n    grid = SQLFORM.smartgrid(db.movie)\n    return dict(grid=grid)\n\ndef download():\n    return response.download(request, db)\n\n\n\n\n\ndef get_movie_data():\n    \n    log.info(\'get movie data\')\n    log.info(\'request.arg = %s\', request.args[0])\n    movie_info = []\n    \n    try: \n        #movie_info = db(db.movie.id == int(request.args[0]) + 1).select()[0] \n        movie_info = db(db.movie.id == int(request.args[0])).select()[0] \n    except:\n        log.error(\'movie is not in db\')\n        return json.dumps([])\n\n    data =  { MOVIE_TRAILER_URL:movie_info.trailerUrl,\n               MOVIE_TYPE:movie_info.movieType,\n               MOVIE_THEATER:movie_info.theater,\n               MOVIE_STORY:movie_info.plot,\n               MOVIE_NAME:movie_info.name\n            } \n    return json.dumps([data])\n\ndef get_schedule_table():\n    """\n        return schedule \n    """\n    # get all theater\n    try:\n        theater_list = db(db.theater).select()\n        log.debug(\'Number of theater is %d\', len(theater_list))\n        print\'theater_list = \', theater_list\n        #get movie that is onscreen\n        movie_list = db(db.movie.status.contains(ON_SCREEN)).select()\n        log.debug(\'Number of movie  is %d\', len(movie_list))\n        # get schedule of each theater\n        schedule_info = {} \n        for theater in theater_list:\n            schedule_data = []\n            for movie in movie_list:\n                #if movie.theater[0].find(theater.name) != -1:\n                if theater.name in movie.theater:\n                    schedule_data.insert(0, movie.name)\n                else:\n                    print\'theater: %s not in %s\'%(theater.name ,movie.theater)\n            schedule_info[theater.name] = schedule_data\n        log.debug("Schedule info = %s", schedule_info)\n        return json.dumps(schedule_info)\n\n    except:\n        log.error(\'Error getting schedule\')\n        return json.dumps([])\n\n    """\n    vincom = ["The Call 911", "Iron man3", "white House"]\n    danchu = ["inception3", "inception4"]\n    Picomall = ["Am muu cuoi cung", "Chim trong bong toi", "Crood"]\n    Thang8 = ["inception3", "inception4"]\n    data_group = {\'vincom\' :vincom,\'danchu\':danchu,\'Picomall\':Picomall,\'Thang8\':Thang8}\n    return json.dumps(data_group)\n    """\n\ndef get_schedule_result():\n    """\n        Return the schedule base on theater and movie\n    """\n    log.info(\'get schedule result\')\n    log.info(\'request.arg = %s\',request.args)\n    log.info(\'request.arg = %s\', request.args[0])\n    log.info(\'request.arg = %s\', request.args[1])\n    theater_info = request.args[0]\n    movie_info = request.args[1]\n    #get theater\n    theater = db(db.theater.name == theater_info).select()[0]\n    print\'theater = \', theater\n    movie = db(db.movie.name == movie_info).select()[0]\n    print\'movie = \', movie\n\n    #get schedule from schedule table\n    try:\n        schedule = db(db.schedule.theater == theater.id)(db.schedule.movie == movie.id).select()[0]\n        print\'schedule = \',schedule\n        result = []\n        temp = []\n        for data in schedule.showtime:\n            print\'data = \', data\n            temp.insert(0,data) \n            result.insert(0,temp)\n            temp = []\n        return json.dumps(result)\n    except:\n        log.error("Cant get schedule info from db")\n        return json.dumps([])\n    """\n    array1 = ["9 AM  10 AM  3 PM", "4 PM  8 PM"]\n    array2 = ["9 AM  10 AM  3 PM", "4 PM  8 PM"]\n    #array3 = ["9 AM  10 AM  3 PM", "4 PM  8 PM"]\n    #result = [array1, array2, array3]\n    result = [array1, array2]\n    return json.dumps(result)\n    """\n\ndef press_like_button():\n    """\n    """\n    log.info("like button is press")\n    try:\n        comment_id = int(request.args[0])\n    except:\n        log.error("wrong request")\n        return json.dumps(0)\n    log.info("comment_Id = %d", int(comment_id))\n    try:\n        db(db.comment_tbl.id == comment_id).update(likeCount = db.comment_tbl.likeCount + 1)\n        return json.dumps([1])\n    except:\n        log.error("Cant update db")\n        return json.dumps([0])\n    return json.dumps([0])\n\ndef press_hate_button():\n    """\n    """\n    log.info("hate button is press")\n    try:\n        comment_id = int(request.args[0])\n    except:\n        log.error("wrong request")\n        return json.dumps([0])\n    log.info("comment_Id = %d", int(comment_id))\n    try:\n        db(db.comment_tbl.id == comment_id).update(hateCount = db.comment_tbl.hateCount + 1)\n        return json.dumps([1])\n    except:\n        log.error("Cant update db")\n        return json.dumps([0])\n    return json.dumps([0])\n\n\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    return dict(form=auth())\n\n\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n\n@auth.requires_signature()\ndef data():\n    """\n    http://..../[app]/default/data/tables\n    http://..../[app]/default/data/create/[table]\n    http://..../[app]/default/data/read/[table]/[id]\n    http://..../[app]/default/data/update/[table]/[id]\n    http://..../[app]/default/data/delete/[table]/[id]\n    http://..../[app]/default/data/select/[table]\n    http://..../[app]/default/data/search/[table]\n    but URLs must be signed, i.e. linked with\n      A(\'table\',_href=URL(\'data/tables\',user_signature=True))\n    or with the signed load operator\n      LOAD(\'default\',\'data.load\',args=\'tables\',ajax=True,user_signature=True)\n    """\n    return dict(form=crud())\n\nresponse._vars=response._caller(post_comment)\n'
p7
sS'snapshot'
p8
(dp9
S'exception'
p10
(dp11
S'__hash__'
p12
S"<method-wrapper '__hash__' of exceptions.ValueError object>"
p13
sS'__setattr__'
p14
S"<method-wrapper '__setattr__' of exceptions.ValueError object>"
p15
sS'__reduce_ex__'
p16
S'<built-in method __reduce_ex__ of exceptions.ValueError object>'
p17
sS'__getslice__'
p18
S"<method-wrapper '__getslice__' of exceptions.ValueError object>"
p19
sS'__getitem__'
p20
S"<method-wrapper '__getitem__' of exceptions.ValueError object>"
p21
sS'__setstate__'
p22
S'<built-in method __setstate__ of exceptions.ValueError object>'
p23
sS'args'
p24
S'("invalid literal for long() with base 10: \'(null)\'",)'
p25
sS'__reduce__'
p26
S'<built-in method __reduce__ of exceptions.ValueError object>'
p27
sS'__str__'
p28
S"<method-wrapper '__str__' of exceptions.ValueError object>"
p29
sS'__format__'
p30
S'<built-in method __format__ of exceptions.ValueError object>'
p31
sS'__getattribute__'
p32
S"<method-wrapper '__getattribute__' of exceptions.ValueError object>"
p33
sS'__class__'
p34
S"<type 'exceptions.ValueError'>"
p35
sS'__unicode__'
p36
S'<built-in method __unicode__ of exceptions.ValueError object>'
p37
sS'__delattr__'
p38
S"<method-wrapper '__delattr__' of exceptions.ValueError object>"
p39
sS'__subclasshook__'
p40
S'<built-in method __subclasshook__ of type object>'
p41
sS'__repr__'
p42
S"<method-wrapper '__repr__' of exceptions.ValueError object>"
p43
sS'__dict__'
p44
S'{}'
p45
sS'__sizeof__'
p46
S'<built-in method __sizeof__ of exceptions.ValueError object>'
p47
sS'__doc__'
p48
S"'Inappropriate argument value (of correct type).'"
p49
sS'__init__'
p50
S"<method-wrapper '__init__' of exceptions.ValueError object>"
p51
sS'__new__'
p52
S'<built-in method __new__ of type object>'
p53
ssS'evalue'
p54
S"invalid literal for long() with base 10: '(null)'"
p55
sS'request'
p56
cgluon.html
XML_unpickle
p57
(S's!M\x00\x00<div><table><tr><td style="font-weight:bold;vertical-align:top">ajax</td><td valign="top">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">application</td><td valign="top">:</td><td><div>welcome</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">args</td><td valign="top">:</td><td><div><table></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">body</td><td valign="top">:</td><td><div>&lt;cStringIO.StringO object at 0x10b4dbab0&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">cid</td><td valign="top">:</td><td><div>None</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">client</td><td valign="top">:</td><td><div>127.0.0.1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">controller</td><td valign="top">:</td><td><div>default</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">cookies</td><td valign="top">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top">session_id_welcome</td><td valign="top">:</td><td><div>127.0.0.1-2f2773f5-ccc9-4256-aa30-e4ef17c18653<table><tr><td style="font-weight:bold;vertical-align:top">comment</td><td valign="top">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">domain</td><td valign="top">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">expires</td><td valign="top">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">httponly</td><td valign="top">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">max-age</td><td valign="top">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">path</td><td valign="top">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">secure</td><td valign="top">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">version</td><td valign="top">:</td><td><div></div></td></tr></table></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">env</td><td valign="top">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top">app_folders</td><td valign="top">:</td><td><div>set([&#x27;/Users/huyheo/Documents/MovieReview_ServerSide/web2py/applications/welcome/&#x27;])</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">applications_parent</td><td valign="top">:</td><td><div>/Users/huyheo/Documents/MovieReview_ServerSide/web2py</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">cmd_args</td><td valign="top">:</td><td><div><table></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">cmd_options</td><td valign="top">:</td><td><div>&lt;Values at 0x107b573f8: {&#x27;verbose&#x27;: False, &#x27;ip&#x27;: &#x27;127.0.0.1&#x27;, &#x27;with_scheduler&#x27;: False, &#x27;ips&#x27;: [&#x27;124.46.127.216&#x27;, &#x27;fe80::aa20:66ff:fe54:c1c7%en0&#x27;], &#x27;shutdown_timeout&#x27;: 5, &#x27;taskbar&#x27;: False, &#x27;with_coverage&#x27;: False, &#x27;port&#x27;: 2001, &#x27;maxthreads&#x27;: None, &#x27;softcron&#x27;: False, &#x27;server_name&#x27;: &#x27;vkxs-Mac-mini.local&#x27;, &#x27;bpython&#x27;: False, &#x27;nogui&#x27;: False, &#x27;pid_filename&#x27;: &#x27;httpserver.pid&#x27;, &#x27;extcron&#x27;: False, &#x27;runcron&#x27;: False, &#x27;run_system_tests&#x27;: False, &#x27;test&#x27;: None, &#x27;folder&#x27;: &#x27;/Users/huyheo/Documents/MovieReview_ServerSide/web2py&#x27;, &#x27;config&#x27;: &#x27;&#x27;, &#x27;minthreads&#x27;: None, &#x27;winservice&#x27;: &#x27;&#x27;, &#x27;shell&#x27;: None, &#x27;run&#x27;: &#x27;&#x27;, &#x27;log_filename&#x27;: &#x27;httpserver.log&#x27;, &#x27;debuglevel&#x27;: 30, &#x27;args&#x27;: [&#x27;&#x27;], &#x27;socket_timeout&#x27;: 5, &#x27;ssl_ca_certificate&#x27;: None, &#x27;scheduler&#x27;: None, &#x27;profiler_filename&#x27;: None, &#x27;ssl_private_key&#x27;: &#x27;&#x27;, &#x27;scheduler_groups&#x27;: None, &#x27;password&#x27;: &#x27;&#x27;, &#x27;request_queue_size&#x27;: 5, &#x27;ssl_certificate&#x27;: &#x27;&#x27;, &#x27;cronjob&#x27;: False, &#x27;numthreads&#x27;: None, &#x27;quiet&#x27;: False, &#x27;interfaces&#x27;: None, &#x27;import_models&#x27;: False, &#x27;timeout&#x27;: 10, &#x27;plain&#x27;: False, &#x27;nobanner&#x27;: False}&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">db_sessions</td><td valign="top">:</td><td><div>set([])</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">debugging</td><td valign="top">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">gluon_parent</td><td valign="top">:</td><td><div>/Users/huyheo/Documents/MovieReview_ServerSide/web2py</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">http_accept</td><td valign="top">:</td><td><div>*/*</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">http_accept_encoding</td><td valign="top">:</td><td><div>gzip, deflate</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">http_accept_language</td><td valign="top">:</td><td><div>en-us</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">http_connection</td><td valign="top">:</td><td><div>keep-alive</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">http_cookie</td><td valign="top">:</td><td><div>session_id_welcome=127.0.0.1-2f2773f5-ccc9-4256-aa30-e4ef17c18653</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">http_host</td><td valign="top">:</td><td><div>127.0.0.1:2001</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">http_user_agent</td><td valign="top">:</td><td><div>Matchismo/1.0 CFNetwork/609.1.4 Darwin/12.4.0</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">is_jython</td><td valign="top">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">is_pypy</td><td valign="top">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">local_hosts</td><td valign="top">:</td><td><div><table><tr><td><div>fe80::aa20:66ff:fe54:c1c7%en0</div></td></tr><tr><td><div>124.46.127.216</div></td></tr><tr><td><div>::ffff:127.0.0.1</div></td></tr><tr><td><div>::1</div></td></tr><tr><td><div>vkxs-Mac-mini.local</div></td></tr><tr><td><div>127.0.0.1</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">path_info</td><td valign="top">:</td><td><div>/welcome/default/post_comment/</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">query_string</td><td valign="top">:</td><td><div>id=(null)&amp;ratting=(null)&amp;content=(null)</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">remote_addr</td><td valign="top">:</td><td><div>127.0.0.1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">remote_port</td><td valign="top">:</td><td><div>50313</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">request_method</td><td valign="top">:</td><td><div>GET</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">request_uri</td><td valign="top">:</td><td><div>/welcome/default/post_comment/?id=(null)&amp;ratting=(null)&amp;content=(null)</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">script_name</td><td valign="top">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">server_name</td><td valign="top">:</td><td><div>vkxs-Mac-mini.local</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">server_port</td><td valign="top">:</td><td><div>2001</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">server_protocol</td><td valign="top">:</td><td><div>HTTP/1.1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">server_software</td><td valign="top">:</td><td><div>Rocket 1.2.6</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">web2py_path</td><td valign="top">:</td><td><div>/Users/huyheo/Documents/MovieReview_ServerSide/web2py</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">web2py_version</td><td valign="top">:</td><td><div>2.5.1-stable+timestamp.2013.06.06.15.39.19</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">wsgi_errors</td><td valign="top">:</td><td><div>&lt;open file &#x27;&lt;stderr&gt;&#x27;, mode &#x27;w&#x27; at 0x107132270&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">wsgi_file_wrapper</td><td valign="top">:</td><td><div>&lt;class wsgiref.util.FileWrapper at 0x107b61738&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">wsgi_input</td><td valign="top">:</td><td><div>&lt;socket._fileobject object at 0x107e7d1d0&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">wsgi_multiprocess</td><td valign="top">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">wsgi_multithread</td><td valign="top">:</td><td><div>True</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">wsgi_run_once</td><td valign="top">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">wsgi_url_scheme</td><td valign="top">:</td><td><div>http</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">wsgi_version</td><td valign="top">:</td><td><div><table><tr><td><div>1</div></td></tr><tr><td><div>0</div></td></tr></table></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">extension</td><td valign="top">:</td><td><div>html</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">folder</td><td valign="top">:</td><td><div>/Users/huyheo/Documents/MovieReview_ServerSide/web2py/applications/welcome/</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">function</td><td valign="top">:</td><td><div>post_comment</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">get_vars</td><td valign="top">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top">content</td><td valign="top">:</td><td><div>(null)</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">id</td><td valign="top">:</td><td><div>(null)</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">ratting</td><td valign="top">:</td><td><div>(null)</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">global_settings</td><td valign="top">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top">app_folders</td><td valign="top">:</td><td><div>set([&#x27;/Users/huyheo/Documents/MovieReview_ServerSide/web2py/applications/welcome/&#x27;])</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">applications_parent</td><td valign="top">:</td><td><div>/Users/huyheo/Documents/MovieReview_ServerSide/web2py</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">cmd_args</td><td valign="top">:</td><td><div><table></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">cmd_options</td><td valign="top">:</td><td><div>&lt;Values at 0x107b573f8: {&#x27;verbose&#x27;: False, &#x27;ip&#x27;: &#x27;127.0.0.1&#x27;, &#x27;with_scheduler&#x27;: False, &#x27;ips&#x27;: [&#x27;124.46.127.216&#x27;, &#x27;fe80::aa20:66ff:fe54:c1c7%en0&#x27;], &#x27;shutdown_timeout&#x27;: 5, &#x27;taskbar&#x27;: False, &#x27;with_coverage&#x27;: False, &#x27;port&#x27;: 2001, &#x27;maxthreads&#x27;: None, &#x27;softcron&#x27;: False, &#x27;server_name&#x27;: &#x27;vkxs-Mac-mini.local&#x27;, &#x27;bpython&#x27;: False, &#x27;nogui&#x27;: False, &#x27;pid_filename&#x27;: &#x27;httpserver.pid&#x27;, &#x27;extcron&#x27;: False, &#x27;runcron&#x27;: False, &#x27;run_system_tests&#x27;: False, &#x27;test&#x27;: None, &#x27;folder&#x27;: &#x27;/Users/huyheo/Documents/MovieReview_ServerSide/web2py&#x27;, &#x27;config&#x27;: &#x27;&#x27;, &#x27;minthreads&#x27;: None, &#x27;winservice&#x27;: &#x27;&#x27;, &#x27;shell&#x27;: None, &#x27;run&#x27;: &#x27;&#x27;, &#x27;log_filename&#x27;: &#x27;httpserver.log&#x27;, &#x27;debuglevel&#x27;: 30, &#x27;args&#x27;: [&#x27;&#x27;], &#x27;socket_timeout&#x27;: 5, &#x27;ssl_ca_certificate&#x27;: None, &#x27;scheduler&#x27;: None, &#x27;profiler_filename&#x27;: None, &#x27;ssl_private_key&#x27;: &#x27;&#x27;, &#x27;scheduler_groups&#x27;: None, &#x27;password&#x27;: &#x27;&#x27;, &#x27;request_queue_size&#x27;: 5, &#x27;ssl_certificate&#x27;: &#x27;&#x27;, &#x27;cronjob&#x27;: False, &#x27;numthreads&#x27;: None, &#x27;quiet&#x27;: False, &#x27;interfaces&#x27;: None, &#x27;import_models&#x27;: False, &#x27;timeout&#x27;: 10, &#x27;plain&#x27;: False, &#x27;nobanner&#x27;: False}&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">db_sessions</td><td valign="top">:</td><td><div>set([])</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">debugging</td><td valign="top">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">gluon_parent</td><td valign="top">:</td><td><div>/Users/huyheo/Documents/MovieReview_ServerSide/web2py</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">is_jython</td><td valign="top">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">is_pypy</td><td valign="top">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">local_hosts</td><td valign="top">:</td><td><div><table><tr><td><div>fe80::aa20:66ff:fe54:c1c7%en0</div></td></tr><tr><td><div>124.46.127.216</div></td></tr><tr><td><div>::ffff:127.0.0.1</div></td></tr><tr><td><div>::1</div></td></tr><tr><td><div>vkxs-Mac-mini.local</div></td></tr><tr><td><div>127.0.0.1</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">web2py_version</td><td valign="top">:</td><td><div>2.5.1-stable+timestamp.2013.06.06.15.39.19</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">is_https</td><td valign="top">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">is_local</td><td valign="top">:</td><td><div>True</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">is_restful</td><td valign="top">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">now</td><td valign="top">:</td><td><div>datetime.datetime(2013, 7, 25, 17, 27, 22, 944881)</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">post_vars</td><td valign="top">:</td><td><div><table></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">raw_args</td><td valign="top">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">raw_extension</td><td valign="top">:</td><td><div>None</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">url</td><td valign="top">:</td><td><div>/welcome/default/post_comment/</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">utcnow</td><td valign="top">:</td><td><div>datetime.datetime(2013, 7, 25, 10, 27, 22, 944895)</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">uuid</td><td valign="top">:</td><td><div>welcome/127.0.0.1.2013-07-25.17-27-22.bdbfd891-7fd6-4e6a-9e69-a2807a587691</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">vars</td><td valign="top">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top">content</td><td valign="top">:</td><td><div>(null)</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">id</td><td valign="top">:</td><td><div>(null)</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">ratting</td><td valign="top">:</td><td><div>(null)</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">wsgi</td><td valign="top">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top">environ</td><td valign="top">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top">HTTP_ACCEPT</td><td valign="top">:</td><td><div>*/*</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">HTTP_ACCEPT_ENCODING</td><td valign="top">:</td><td><div>gzip, deflate</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">HTTP_ACCEPT_LANGUAGE</td><td valign="top">:</td><td><div>en-us</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">HTTP_CONNECTION</td><td valign="top">:</td><td><div>keep-alive</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">HTTP_COOKIE</td><td valign="top">:</td><td><div>session_id_welcome=127.0.0.1-2f2773f5-ccc9-4256-aa30-e4ef17c18653</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">HTTP_HOST</td><td valign="top">:</td><td><div>127.0.0.1:2001</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">HTTP_USER_AGENT</td><td valign="top">:</td><td><div>Matchismo/1.0 CFNetwork/609.1.4 Darwin/12.4.0</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">PATH_INFO</td><td valign="top">:</td><td><div>/welcome/default/post_comment/</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">QUERY_STRING</td><td valign="top">:</td><td><div>id=(null)&amp;ratting=(null)&amp;content=(null)</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">REMOTE_ADDR</td><td valign="top">:</td><td><div>127.0.0.1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">REMOTE_PORT</td><td valign="top">:</td><td><div>50313</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">REQUEST_METHOD</td><td valign="top">:</td><td><div>GET</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">REQUEST_URI</td><td valign="top">:</td><td><div>/welcome/default/post_comment/?id=(null)&amp;ratting=(null)&amp;content=(null)</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">SCRIPT_NAME</td><td valign="top">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">SERVER_NAME</td><td valign="top">:</td><td><div>vkxs-Mac-mini.local</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">SERVER_PORT</td><td valign="top">:</td><td><div>2001</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">SERVER_PROTOCOL</td><td valign="top">:</td><td><div>HTTP/1.1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">SERVER_SOFTWARE</td><td valign="top">:</td><td><div>Rocket 1.2.6</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">wsgi.errors</td><td valign="top">:</td><td><div>&lt;open file &#x27;&lt;stderr&gt;&#x27;, mode &#x27;w&#x27; at 0x107132270&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">wsgi.file_wrapper</td><td valign="top">:</td><td><div>&lt;class wsgiref.util.FileWrapper at 0x107b61738&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">wsgi.input</td><td valign="top">:</td><td><div>&lt;cStringIO.StringO object at 0x10b4dbab0&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">wsgi.multiprocess</td><td valign="top">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">wsgi.multithread</td><td valign="top">:</td><td><div>True</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">wsgi.run_once</td><td valign="top">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">wsgi.url_scheme</td><td valign="top">:</td><td><div>http</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">wsgi.version</td><td valign="top">:</td><td><div>1</div></td></tr></table></div></td></tr></table></div></td></tr></table></div>'
tRp58
sS'frames'
p59
(lp60
(dp61
S'file'
p62
S'/Users/huyheo/Documents/MovieReview_ServerSide/web2py/gluon/restricted.py'
p63
sS'dump'
p64
(dp65
S'environment'
p66
S"{'A': <class 'gluon.html.A'>, 'ALL_MOVIE_TYPE': 'all_movie', 'ANY_OF': <class 'gluon.validators.ANY_OF'>, 'ARCHIVE': 'archive', 'Auth': <class 'gluon.tools.Auth'>, 'B': <class 'gluon.html.B'>, 'BEAUTIFY': <class 'gluon.html.BEAUTIFY'>, 'BODY': <class 'gluon.html.BODY'>, 'BR': <class 'gluon.html.BR'>, 'BUTTON': <class 'gluon.html.BUTTON'>, ...}"
p67
sS'ccode'
p68
S'<code object <module> at 0x10b476bb0, file "/Use...cations/welcome/controllers/default.py", line 12>'
p69
ssS'lnum'
p70
I212
sS'lines'
p71
(dp72
I207
S'    try:'
p73
sI208
S'        if isinstance(code, types.CodeType):'
p74
sI209
S'            ccode = code'
p75
sI210
S'        else:'
p76
sI211
S'            ccode = compile2(code, layer)'
p77
sI212
S'        exec ccode in environment'
p78
sI213
S'    except HTTP:'
p79
sI214
S'        raise'
p80
sI215
S'    except RestrictedError:'
p81
sI216
S'        # do not encapsulate (obfuscate) the original RestrictedError'
p82
ssS'call'
p83
S"(code='# -*- coding: utf-8 -*-\\n# this file is released ...)\\n\\nresponse._vars=response._caller(post_comment)\\n', environment={'A': <class 'gluon.html.A'>, 'ALL_MOVIE_TYPE': 'all_movie', 'ANY_OF': <class 'gluon.validators.ANY_OF'>, 'ARCHIVE': 'archive', 'Auth': <class 'gluon.tools.Auth'>, 'B': <class 'gluon.html.B'>, 'BEAUTIFY': <class 'gluon.html.BEAUTIFY'>, 'BODY': <class 'gluon.html.BODY'>, 'BR': <class 'gluon.html.BR'>, 'BUTTON': <class 'gluon.html.BUTTON'>, ...}, layer='/Users/huyheo/Documents/MovieReview_ServerSide/web2py/applications/welcome/controllers/default.py')"
p84
sS'func'
p85
S'restricted'
p86
sa(dp87
g62
S'/Users/huyheo/Documents/MovieReview_ServerSide/web2py/applications/welcome/controllers/default.py'
p88
sg64
(dp89
sg70
I472
sg71
(dp90
I461
S'    http://..../[app]/default/data/update/[table]/[id]'
p91
sI462
S'    http://..../[app]/default/data/delete/[table]/[id]'
p92
sI463
S'    http://..../[app]/default/data/select/[table]'
p93
sI464
S'    http://..../[app]/default/data/search/[table]'
p94
sI465
S'    but URLs must be signed, i.e. linked with'
p95
sI466
S"      A('table',_href=URL('data/tables',user_signature=True))"
p96
sI467
S'    or with the signed load operator'
p97
sI468
S"      LOAD('default','data.load',args='tables',ajax=True,user_signature=True)"
p98
sI469
S'    """'
p99
sI470
S'    return dict(form=crud())'
p100
ssg83
S'()'
p101
sg85
S'<module>'
p102
sa(dp103
g62
S'/Users/huyheo/Documents/MovieReview_ServerSide/web2py/gluon/globals.py'
p104
sg64
(dp105
S'self'
p106
S'undefined'
p107
sS'f'
S'<function post_comment>'
p108
ssg70
I194
sg71
(dp109
I192
S"        self.delimiters = ('{{', '}}')"
p110
sI193
S'        self._vars = None'
p111
sI194
S'        self._caller = lambda f: f()'
p112
sI195
S'        self._view_environment = None'
p113
sI196
S'        self._custom_commit = None'
p114
sI197
S'        self._custom_rollback = None'
p115
sI198
S''
sI189
S'        self.menu = []             # used by the default view layout'
p116
sI190
S'        self.files = []            # used by web2py_ajax.html'
p117
sI191
S'        self.generic_patterns = []  # patterns to allow generic views'
p118
ssg83
S'(f=<function post_comment>)'
p119
sg85
S'<lambda>'
p120
sa(dp121
g62
S'/Users/huyheo/Documents/MovieReview_ServerSide/web2py/applications/welcome/controllers/default.py'
p122
sg64
(dp123
S'syncStatus'
p124
g107
ssg70
I117
sg71
(dp125
I112
S"    id = db.comment_tbl.insert(commentContent = request.vars['content'],"
p126
sI113
S'                                likeCount = 0,'
p127
sI114
S"                                ratting = request.vars['ratting'],"
p128
sI115
S'                                replyCount = 0,'
p129
sI116
S"                                movie = request.vars['id'],"
p130
sI117
S'                                syncStatus = 1)'
p131
sI118
S"    print' update successfully id :',id"
p132
sI119
S'    return json.dumps([id])'
p133
sI120
S''
sI121
S''
ssg83
S'()'
p134
sg85
S'post_comment'
p135
sa(dp136
g62
S'/Users/huyheo/Documents/MovieReview_ServerSide/web2py/gluon/dal.py'
p137
sg64
(dp138
S'self._listify'
p139
S'<bound method Table._listify of <Table comment_t...,ratting,replyCount,movie,user_info,syncStatus)>>'
p140
sS'fields'
p141
S"{'commentContent': '(null)', 'likeCount': 0, 'movie': '(null)', 'ratting': '(null)', 'replyCount': 0, 'syncStatus': 1}"
p142
sS'self'
p143
S'<Table comment_tbl (id,commentContent,likeCount,ratting,replyCount,movie,user_info,syncStatus)>'
p144
sS'ret'
p145
g107
sS'self._db._adapter'
p146
S'<gluon.dal.SQLiteAdapter object>'
p147
sS'self._db._adapter.insert'
p148
S'<bound method SQLiteAdapter.insert of <gluon.dal.SQLiteAdapter object>>'
p149
sS'self._db'
p150
S'<DAL uri="sqlite://storage.sqlite">'
p151
ssg70
I8598
sg71
(dp152
I8593
S''
sI8594
S'    def insert(self, **fields):'
p153
sI8595
S'        fields = self._defaults(fields)'
p154
sI8596
S'        self._attempt_upload(fields)'
p155
sI8597
S'        if any(f(fields) for f in self._before_insert): return 0'
p156
sI8598
S'        ret =  self._db._adapter.insert(self, self._listify(fields))'
p157
sI8599
S'        if ret and self._after_insert:'
p158
sI8600
S'            fields = Row(fields)'
p159
sI8601
S'            [f(fields,ret) for f in self._after_insert]'
p160
sI8602
S'        return ret'
p161
ssg83
S"(self=<Table comment_tbl (id,commentContent,likeCount,ratting,replyCount,movie,user_info,syncStatus)>, **fields={'commentContent': '(null)', 'likeCount': 0, 'movie': '(null)', 'ratting': '(null)', 'replyCount': 0, 'syncStatus': 1})"
p162
sg85
S'insert'
p163
sa(dp164
g62
S'/Users/huyheo/Documents/MovieReview_ServerSide/web2py/gluon/dal.py'
p165
sg64
(dp166
S'self._insert'
p167
S'<bound method SQLiteAdapter._insert of <gluon.dal.SQLiteAdapter object>>'
p168
sS'query'
p169
g107
sS'self'
p170
S'<gluon.dal.SQLiteAdapter object>'
p171
sS'fields'
p172
S"[(<gluon.dal.Field object>, '(null)'), (<gluon.dal.Field object>, '(null)'), (<gluon.dal.Field object>, 0), (<gluon.dal.Field object>, 0), (<gluon.dal.Field object>, 1), (<gluon.dal.Field object>, '(null)')]"
p173
sS'table'
p174
S'<Table comment_tbl (id,commentContent,likeCount,ratting,replyCount,movie,user_info,syncStatus)>'
p175
ssg70
I1203
sg71
(dp176
I1198
S''
sI1199
S'    def _insert_empty(self, table):'
p177
sI1200
S"        return 'INSERT INTO %s DEFAULT VALUES;' % table"
p178
sI1201
S''
sI1202
S'    def insert(self, table, fields):'
p179
sI1203
S'        query = self._insert(table,fields)'
p180
sI1204
S'        try:'
p181
sI1205
S'            self.execute(query)'
p182
sI1206
S'        except Exception:'
p183
sI1207
S'            e = sys.exc_info()[1]'
p184
ssg83
S"(self=<gluon.dal.SQLiteAdapter object>, table=<Table comment_tbl (id,commentContent,likeCount,ratting,replyCount,movie,user_info,syncStatus)>, fields=[(<gluon.dal.Field object>, '(null)'), (<gluon.dal.Field object>, '(null)'), (<gluon.dal.Field object>, 0), (<gluon.dal.Field object>, 0), (<gluon.dal.Field object>, 1), (<gluon.dal.Field object>, '(null)')])"
p185
sg85
g163
sa(dp186
g62
S'/Users/huyheo/Documents/MovieReview_ServerSide/web2py/gluon/dal.py'
p187
sg64
(dp188
S'f'
g107
sS'fields'
p189
S"[(<gluon.dal.Field object>, '(null)'), (<gluon.dal.Field object>, '(null)'), (<gluon.dal.Field object>, 0), (<gluon.dal.Field object>, 0), (<gluon.dal.Field object>, 1), (<gluon.dal.Field object>, '(null)')]"
p190
sS'self'
p191
S'<gluon.dal.SQLiteAdapter object>'
p192
sS'values'
p193
g107
sS'v'
g107
sS'self.expand'
p194
S'<bound method SQLiteAdapter.expand of <gluon.dal.SQLiteAdapter object>>'
p195
ssg70
I1194
sg71
(dp196
I1189
S"            logfile.write('success!\\n')"
p197
sI1190
S''
sI1191
S'    def _insert(self, table, fields):'
p198
sI1192
S'        if fields:'
p199
sI1193
S"            keys = ','.join(f.name for f, v in fields)"
p200
sI1194
S"            values = ','.join(self.expand(v, f.type) for f, v in fields)"
p201
sI1195
S"            return 'INSERT INTO %s(%s) VALUES (%s);' % (table, keys, values)"
p202
sI1196
S'        else:'
p203
sI1197
S'            return self._insert_empty(table)'
p204
sI1198
S''
ssg83
S"(self=<gluon.dal.SQLiteAdapter object>, table=<Table comment_tbl (id,commentContent,likeCount,ratting,replyCount,movie,user_info,syncStatus)>, fields=[(<gluon.dal.Field object>, '(null)'), (<gluon.dal.Field object>, '(null)'), (<gluon.dal.Field object>, 0), (<gluon.dal.Field object>, 0), (<gluon.dal.Field object>, 1), (<gluon.dal.Field object>, '(null)')])"
p205
sg85
S'_insert'
p206
sa(dp207
g62
S'/Users/huyheo/Documents/MovieReview_ServerSide/web2py/gluon/dal.py'
p208
sg64
(dp209
S'f'
S'<gluon.dal.Field object>'
p210
sS'fields'
p211
g107
sS'self'
p212
S'<gluon.dal.SQLiteAdapter object>'
p213
sS'f.type'
p214
S"'reference movie'"
p215
sS'values'
p216
g107
sS'v'
S"'(null)'"
p217
sS'self.expand'
p218
S'<bound method SQLiteAdapter.expand of <gluon.dal.SQLiteAdapter object>>'
p219
ssg70
I1194
sg71
(dp220
I1189
S"            logfile.write('success!\\n')"
p221
sI1190
S''
sI1191
S'    def _insert(self, table, fields):'
p222
sI1192
S'        if fields:'
p223
sI1193
S"            keys = ','.join(f.name for f, v in fields)"
p224
sI1194
S"            values = ','.join(self.expand(v, f.type) for f, v in fields)"
p225
sI1195
S"            return 'INSERT INTO %s(%s) VALUES (%s);' % (table, keys, values)"
p226
sI1196
S'        else:'
p227
sI1197
S'            return self._insert_empty(table)'
p228
sI1198
S''
ssg83
S"((f=<gluon.dal.Field object>, v='(null)'))"
p229
sg85
S'<genexpr>'
p230
sa(dp231
g62
S'/Users/huyheo/Documents/MovieReview_ServerSide/web2py/gluon/dal.py'
p232
sg64
(dp233
S'builtinstr'
p234
S"<type 'str'>"
p235
sS'field_type'
p236
S"'reference movie'"
p237
sS'self'
p238
S'<gluon.dal.SQLiteAdapter object>'
p239
sS'expression'
p240
S"'(null)'"
p241
sS'self.represent'
p242
S'<bound method SQLiteAdapter.represent of <gluon.dal.SQLiteAdapter object>>'
p243
ssg70
I1376
sg71
(dp244
I1376
S'            return str(self.represent(expression,field_type))'
p245
sI1377
S'        elif isinstance(expression,(list,tuple)):'
p246
sI1378
S"            return ','.join(self.represent(item,field_type) \\"
p247
sI1379
S'                                for item in expression)'
p248
sI1380
S'        elif isinstance(expression, bool):'
p249
sI1371
S'                    op=op[:-1]'
p250
sI1372
S"                return '(%s)' % op"
p251
sI1373
S'            else:'
p252
sI1374
S'                return op()'
p253
sI1375
S'        elif field_type:'
p254
ssg83
S"(self=<gluon.dal.SQLiteAdapter object>, expression='(null)', field_type='reference movie')"
p255
sg85
S'expand'
p256
sa(dp257
g62
S'/Users/huyheo/Documents/MovieReview_ServerSide/web2py/gluon/dal.py'
p258
sg64
(dp259
S'builtinstr'
p260
S"<type 'str'>"
p261
sS'builtinlong'
p262
S"<type 'long'>"
p263
sS'obj'
p264
S"'(null)'"
p265
ssg70
I1830
sg71
(dp266
I1825
S"        elif field_is_type('reference'): # reference"
p267
sI1826
S"            if fieldtype.find('.')>0:"
p268
sI1827
S'                return repr(obj)'
p269
sI1828
S'            elif isinstance(obj, (Row, Reference)):'
p270
sI1829
S"                return str(obj['id'])"
p271
sI1830
S'            return str(long(obj))'
p272
sI1831
S"        elif fieldtype == 'double':"
p273
sI1832
S'            return repr(float(obj))'
p274
sI1833
S'        if isinstance(obj, unicode):'
p275
sI1834
S'            obj = obj.encode(self.db_codec)'
p276
ssg83
S"(self=<gluon.dal.SQLiteAdapter object>, obj='(null)', fieldtype='reference movie')"
p277
sg85
S'represent'
p278
sasS'pyver'
p279
S'Python 2.7.2: /usr/bin/python (prefix: /System/Library/Frameworks/Python.framework/Versions/2.7)'
p280
sS'session'
p281
g57
(S's\x1a\x00\x00\x00<div><table></table></div>'
tRp282
sS'etype'
p283
S"<type 'exceptions.ValueError'>"
p284
sS'date'
p285
S'Thu Jul 25 17:27:23 2013'
p286
sS'response'
p287
g57
(S's\xb0+\x00\x00<div><table><tr><td style="font-weight:bold;vertical-align:top">body</td><td valign="top">:</td><td><div>&lt;cStringIO.StringO object at 0x107e05768&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">cookies</td><td valign="top">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top">session_id_welcome</td><td valign="top">:</td><td><div>127.0.0.1-2f2773f5-ccc9-4256-aa30-e4ef17c18653<table><tr><td style="font-weight:bold;vertical-align:top">comment</td><td valign="top">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">domain</td><td valign="top">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">expires</td><td valign="top">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">httponly</td><td valign="top">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">max-age</td><td valign="top">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">path</td><td valign="top">:</td><td><div>/</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">secure</td><td valign="top">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">version</td><td valign="top">:</td><td><div></div></td></tr></table></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">delimiters</td><td valign="top">:</td><td><div><table><tr><td><div>{{</div></td></tr><tr><td><div>}}</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">files</td><td valign="top">:</td><td><div><table></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">flash</td><td valign="top">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">generic_patterns</td><td valign="top">:</td><td><div><table><tr><td><div>*</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">google_analytics_id</td><td valign="top">:</td><td><div>None</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">headers</td><td valign="top">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top">X-Powered-By</td><td valign="top">:</td><td><div>web2py</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">logo</td><td valign="top">:</td><td><div><a class="brand" href="http://www.web2py.com/"><b>web<span>2</span>py</b>&trade;&nbsp;</a></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">menu</td><td valign="top">:</td><td><div><table><tr><td><div><table><tr><td><div>Home</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/welcome/default/index</div></td></tr><tr><td><div><table></table></div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div><span class="highlighted">web2py</span></div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>http://web2py.com</div></td></tr><tr><td><div><table><tr><td><div><table><tr><td><div>My Sites</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/admin/default/site</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>This App</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/admin/default/design/welcome</div></td></tr><tr><td><div>[(&lt;lazyT &#x27;Controller&#x27;&gt;, False, &#x27;/admin/default/edit/welcome/controllers/default.py&#x27;), (&lt;lazyT &#x27;View&#x27;&gt;, False, &#x27;/admin/default/edit/welcome/views/default/post_comment.html&#x27;), (&lt;lazyT &#x27;Layout&#x27;&gt;, False, &#x27;/admin/default/edit/welcome/views/layout.html&#x27;), (&lt;lazyT &#x27;Stylesheet&#x27;&gt;, False, &#x27;/admin/default/edit/welcome/static/css/web2py.css&#x27;), (&lt;lazyT &#x27;DB Model&#x27;&gt;, False, &#x27;/admin/default/edit/welcome/models/db.py&#x27;), (&lt;lazyT &#x27;Menu Model&#x27;&gt;, False, &#x27;/admin/default/edit/welcome/models/menu.py&#x27;), (&lt;lazyT &#x27;Database&#x27;&gt;, False, &#x27;/welcome/appadmin/index&#x27;), (&lt;lazyT &#x27;Errors&#x27;&gt;, False, &#x27;/admin/default/errors/welcome&#x27;), (&lt;lazyT &#x27;About&#x27;&gt;, False, &#x27;/admin/default/about/welcome&#x27;)]</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>web2py.com</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>http://www.web2py.com</div></td></tr><tr><td><div>[(&lt;lazyT &#x27;Download&#x27;&gt;, False, &#x27;http://www.web2py.com/examples/default/download&#x27;), (&lt;lazyT &#x27;Support&#x27;&gt;, False, &#x27;http://www.web2py.com/examples/default/support&#x27;), (&lt;lazyT &#x27;Demo&#x27;&gt;, False, &#x27;http://web2py.com/demo_admin&#x27;), (&lt;lazyT &#x27;Quick Examples&#x27;&gt;, False, &#x27;http://web2py.com/examples/default/examples&#x27;), (&lt;lazyT &#x27;FAQ&#x27;&gt;, False, &#x27;http://web2py.com/AlterEgo&#x27;), (&lt;lazyT &#x27;Videos&#x27;&gt;, False, &#x27;http://www.web2py.com/examples/default/videos/&#x27;), (&lt;lazyT &#x27;Free Applications&#x27;&gt;, False, &#x27;http://web2py.com/appliances&#x27;), (&lt;lazyT &#x27;Plugins&#x27;&gt;, False, &#x27;http://web2py.com/plugins&#x27;), (&lt;lazyT &#x27;Layouts&#x27;&gt;, False, &#x27;http://web2py.com/layouts&#x27;), (&lt;lazyT &#x27;Recipes&#x27;&gt;, False, &#x27;http://web2pyslices.com/&#x27;), (&lt;lazyT &#x27;Semantic&#x27;&gt;, False, &#x27;http://web2py.com/semantic&#x27;)]</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Documentation</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>http://www.web2py.com/book</div></td></tr><tr><td><div>[(&lt;lazyT &#x27;Preface&#x27;&gt;, False, &#x27;http://www.web2py.com/book/default/chapter/00&#x27;), (&lt;lazyT &#x27;Introduction&#x27;&gt;, False, &#x27;http://www.web2py.com/book/default/chapter/01&#x27;), (&lt;lazyT &#x27;Python&#x27;&gt;, False, &#x27;http://www.web2py.com/book/default/chapter/02&#x27;), (&lt;lazyT &#x27;Overview&#x27;&gt;, False, &#x27;http://www.web2py.com/book/default/chapter/03&#x27;), (&lt;lazyT &#x27;The Core&#x27;&gt;, False, &#x27;http://www.web2py.com/book/default/chapter/04&#x27;), (&lt;lazyT &#x27;The Views&#x27;&gt;, False, &#x27;http://www.web2py.com/book/default/chapter/05&#x27;), (&lt;lazyT &#x27;Database&#x27;&gt;, False, &#x27;http://www.web2py.com/book/default/chapter/06&#x27;), (&lt;lazyT &#x27;Forms and Validators&#x27;&gt;, False, &#x27;http://www.web2py.com/book/default/chapter/07&#x27;), (&lt;lazyT &#x27;Email and SMS&#x27;&gt;, False, &#x27;http://www.web2py.com/book/default/chapter/08&#x27;), (&lt;lazyT &#x27;Access Control&#x27;&gt;, False, &#x27;http://www.web2py.com/book/default/chapter/09&#x27;), (&lt;lazyT &#x27;Services&#x27;&gt;, False, &#x27;http://www.web2py.com/book/default/chapter/10&#x27;), (&lt;lazyT &#x27;Ajax Recipes&#x27;&gt;, False, &#x27;http://www.web2py.com/book/default/chapter/11&#x27;), (&lt;lazyT &#x27;Components and Plugins&#x27;&gt;, False, &#x27;http://www.web2py.com/book/default/chapter/12&#x27;), (&lt;lazyT &#x27;Deployment Recipes&#x27;&gt;, False, &#x27;http://www.web2py.com/book/default/chapter/13&#x27;), (&lt;lazyT &#x27;Other Recipes&#x27;&gt;, False, &#x27;http://www.web2py.com/book/default/chapter/14&#x27;), (&lt;lazyT &#x27;Buy this book&#x27;&gt;, False, &#x27;http://stores.lulu.com/web2py&#x27;)]</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Community</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>None</div></td></tr><tr><td><div>[(&lt;lazyT &#x27;Groups&#x27;&gt;, False, &#x27;http://www.web2py.com/examples/default/usergroups&#x27;), (&lt;lazyT &#x27;Twitter&#x27;&gt;, False, &#x27;http://twitter.com/web2py&#x27;), (&lt;lazyT &#x27;Live Chat&#x27;&gt;, False, &#x27;http://webchat.freenode.net/?channels=web2py&#x27;)]</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Plugins</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>None</div></td></tr><tr><td><div>[(&#x27;plugin_wiki&#x27;, False, &#x27;http://web2py.com/examples/default/download&#x27;), (&lt;lazyT &#x27;Other Plugins&#x27;&gt;, False, &#x27;http://web2py.com/plugins&#x27;), (&lt;lazyT &#x27;Layout Plugins&#x27;&gt;, False, &#x27;http://web2py.com/layouts&#x27;)]</div></td></tr></table></div></td></tr></table></div></td></tr></table></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">meta</td><td valign="top">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top">author</td><td valign="top">:</td><td><div>Your Name &lt;you@example.com&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">description</td><td valign="top">:</td><td><div>a cool new app</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">generator</td><td valign="top">:</td><td><div>Web2py Web Framework</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">keywords</td><td valign="top">:</td><td><div>web2py, python, framework</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">models_to_run</td><td valign="top">:</td><td><div><table><tr><td><div>^\\w+\\.py$</div></td></tr><tr><td><div>^default/\\w+\\.py$</div></td></tr><tr><td><div>^default/post_comment/\\w+\\.py$</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">postprocessing</td><td valign="top">:</td><td><div><table></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">session_cookie_expires</td><td valign="top">:</td><td><div>None</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">session_data_name</td><td valign="top">:</td><td><div>session_data_welcome</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">session_file</td><td valign="top">:</td><td><div>None</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">session_filename</td><td valign="top">:</td><td><div>/Users/huyheo/Documents/MovieReview_ServerSide/web2py/applications/welcome/sessions/127.0.0.1-2f2773f5-ccc9-4256-aa30-e4ef17c18653</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">session_id</td><td valign="top">:</td><td><div>127.0.0.1-2f2773f5-ccc9-4256-aa30-e4ef17c18653</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">session_id_name</td><td valign="top">:</td><td><div>session_id_welcome</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">session_new</td><td valign="top">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">session_storage_type</td><td valign="top">:</td><td><div>file</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">status</td><td valign="top">:</td><td><div>200</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">subtitle</td><td valign="top">:</td><td><div>customize me!</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">title</td><td valign="top">:</td><td><div>Welcome</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">view</td><td valign="top">:</td><td><div>default/post_comment.html</div></td></tr></table></div>'
tRp288
sS'locals'
p289
(dp290
S'obj'
p291
S"'(null)'"
p292
sS'self'
p293
S'<gluon.dal.SQLiteAdapter object>'
p294
sS'field_is_type'
p295
S'<built-in method startswith of str object>'
p296
sS'r'
S'None'
p297
sS'fieldtype'
p298
S"'reference movie'"
p299
sssS'traceback'
p300
S'Traceback (most recent call last):\n  File "/Users/huyheo/Documents/MovieReview_ServerSide/web2py/gluon/restricted.py", line 212, in restricted\n    exec ccode in environment\n  File "/Users/huyheo/Documents/MovieReview_ServerSide/web2py/applications/welcome/controllers/default.py", line 472, in <module>\n  File "/Users/huyheo/Documents/MovieReview_ServerSide/web2py/gluon/globals.py", line 194, in <lambda>\n    self._caller = lambda f: f()\n  File "/Users/huyheo/Documents/MovieReview_ServerSide/web2py/applications/welcome/controllers/default.py", line 117, in post_comment\n    syncStatus = 1)\n  File "/Users/huyheo/Documents/MovieReview_ServerSide/web2py/gluon/dal.py", line 8598, in insert\n    ret =  self._db._adapter.insert(self, self._listify(fields))\n  File "/Users/huyheo/Documents/MovieReview_ServerSide/web2py/gluon/dal.py", line 1203, in insert\n    query = self._insert(table,fields)\n  File "/Users/huyheo/Documents/MovieReview_ServerSide/web2py/gluon/dal.py", line 1194, in _insert\n    values = \',\'.join(self.expand(v, f.type) for f, v in fields)\n  File "/Users/huyheo/Documents/MovieReview_ServerSide/web2py/gluon/dal.py", line 1194, in <genexpr>\n    values = \',\'.join(self.expand(v, f.type) for f, v in fields)\n  File "/Users/huyheo/Documents/MovieReview_ServerSide/web2py/gluon/dal.py", line 1376, in expand\n    return str(self.represent(expression,field_type))\n  File "/Users/huyheo/Documents/MovieReview_ServerSide/web2py/gluon/dal.py", line 1830, in represent\n    return str(long(obj))\nValueError: invalid literal for long() with base 10: \'(null)\'\n'
p301
s.