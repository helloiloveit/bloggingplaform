(dp1
S'output'
p2
S"<type 'exceptions.KeyError'> 'email'"
p3
sS'layer'
p4
S'/Users/mac/Documents/shareknowledge/applications/welcome/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a samples controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n## - call exposes all registered services (none by default)\n#########################################################################\n\nimport json\nimport logging\nfrom database_handler import *\n\nlog = logging.getLogger("h")\nlog.setLevel(logging.DEBUG)\n\nfrom ConstantDefinition import *\ntry:\n    import json\nexcept ImportError:\n    from gluon.contrib import simplejson as json\nfrom facebook import GraphAPI, GraphAPIError\nfrom gluon.contrib.login_methods.oauth20_account import OAuthAccount\n\n\n\ndef test_jquery():\n    return dict()\ndef test_tinyMCE():\n    return dict()\n\ndef test_facebook():\n    return dict()\n\ndef month_selector():\n    if not request.vars.tag_info: return \'\'\n    months = [\'January\', \'February\', \'March\', \'April\', \'May\',\n              \'June\', \'July\', \'August\', \'September\' ,\'October\',\n              \'November\', \'December\']\n    month_start = request.vars.tag_info.capitalize()\n    selected = [m for m in months if m.startswith(month_start)]\n    return DIV(*[DIV(k,\n                     _onclick="jQuery(\'#month\').val(\'%s\')" % k,\n                     _onmouseover="this.style.backgroundColor=\'yellow\'",\n                     _onmouseout="this.style.backgroundColor=\'white\'"\n                     ) for k in selected])\n\n\n\ndef user():\n    return dict(form = auth())\n\ndef index():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n\n    if you need a simple wiki simple replace the two lines below with:\n    return auth.wiki()\n    """\n    #redirect(URL(r = request, f= \'blog\', args = 3))\n    user = auth.user\n    print user\n    return dict()\n\ndef post_question():\n    data_group = [{\'type\':\'now\',"data":""},{\'type\':\'future\',"data":""}]\n    return json.dumps(data_group)\n\n\n\n\ndef article():\n    """\n    Display blog by id\n    """\n    log.info("request.vars = %s", request.args[0])\n    log.info("request.vars = %s",request.vars)\n\n\n\n    if request.args[0] == \'post_comment\':\n        log.info(\'post a comment\')\n        post_comment(request.vars.questionId, request.vars.editor1, auth.user.id)\n        redirect(URL(r = request, f= \'article\', args = request.vars.questionId))\n\n    else:\n        log.info(\'show article with comment\')\n        log.info(\'id = %s\', request.args[0])\n\n        try:\n            question = db(db.question_tbl.id == int(request.args[0])).select()[0]\n        except:\n            log.error(\'cant query a blog from db\')\n            question = None\n        comment_list = show_question(request.args[0])\n\n        return dict(item = question, comment_list = comment_list)\n\n\ndef show_question(question_id):\n\n    comment_list = db(db.comment_tbl.question_info == question_id).select()\n    return  comment_list\n\n\ndef post_comment(question_id, comment_info, user_id):\n    log.info("post_comment")\n\n    log.info("session.user = %s", auth.user)\n    log.info("auth.user.id = %s", user_id)\n\n\n\n    try:\n        comment_id = db.comment_tbl.insert(comment_info = comment_info,\n                                question_info = question_id,\n                                author_info = user_id\n                                )\n        log.info(\'successfully create a comment_tbl\')\n\n\n    except:\n        log.error(\'cant create comment_tbl\')\n\n\n@auth.requires_login()\ndef edit_article():\n    """\n    Edit blog\n    """\n    log.info("edit artchile")\n    log.info("request.vars 0= %s", request.args[0])\n    log.info("request.vars = %s", request.args)\n    id_info = request.args[0]\n\n    article_class_list = db(db.article_tag).select()\n    log.info("article_class = %s", article_class_list)\n\n    try:\n        blog_item = db(db.blog.id == int(id_info)).select()[0]\n    except:\n        log.error(\'cant query a blog from db\')\n        blog_item = None\n\n\n\n    if request.vars.editor1:\n        article_id = get_article_id(request.vars.article_class)\n        log.info("article-id = %s", article_id)\n        id =db(db.blog.id == int(request.args[0])).update(\n            article_type = article_id,\n            article_header = request.vars.article_header,\n            article_introduction = request.vars.article_introduction,\n            story = request.vars.editor1\n        )\n        redirect(URL(r = request, f= \'article\', args = [request.args[0]]))\n\n    log.info("blog_item = %s",blog_item)\n    return dict(article = blog_item, article_class_list = article_class_list)\n\n        \ndef delete_article():\n    selection = request.vars\n    log.info(\'selection = %s\', selection[\'selection\'])\n    log.info(\'id = %s\', request.args[0])\n    id_info = request.args[0]\n    if selection[\'selection\'] == "YES":\n        log.info("delete post")\n        db(db.question_tbl.id == int(request.args[0])).delete()\n        redirect(URL(r = request, f= \'article_list\'))\n    elif selection[\'selection\'] == "NO":\n        redirect(URL(r = request, f= \'article\', args = [request.args[0]]))\n    return dict()\n\ndef question_list():\n    items= []\n\n    try:\n        items = db(db.question_tbl).select()\n\n    except:\n        log.error(\'cant query data from db\')\n\n    for item in items:\n        log.info(\'items = %s\',item)\n        comment_count = db(db.comment_tbl.id == item.id).select()\n        log.info(\'comment_count = %d\', len(comment_count))\n        tag_list = db(db.tag_tbl.question_info ==item.id).select()\n        log.info(\'tag_list = %d\', len(tag_list))\n        for tag in tag_list:\n            tag_name = db(db.article_tag.id == tag.tag_info).select()[0]\n            log.info(\'tag_name = %s\', tag_name)\n    return dict(items= items)\n\ndef get_header(text):\n    """\n        get header of article\n    """\n    header_position =text.find("<p>&nbsp;</p>")\n    log.info("header_position = %d", header_position)\n    header_text =  request.vars.editor1[:header_position]\n    return header_text\n\n\n\n\n\n#@auth.requires_login()\ndef post():\n    log.info("request.vars = %s",request.vars)\n    session.tag_list_store = []\n    return dict(article_tag_list ="" )\n\n\n@auth.requires_login()\ndef post_tag():\n    log.info("post_tag")\n    log.info("request.vars = %s",request.vars.tag_info)\n    session.tag_list_store.append(request.vars.tag_info)\n    log.info("session.tag list = %s", session.tag_list_store)\n    #return json.dumps(request.vars.tag_info)\n    return "var x=$(\'#target\'); x.html(x.html()+\' %s\');" % request.vars.tag_info.replace("\'","\\\\\'")\n\n\n@auth.requires_login()\ndef post_question():\n    log.info("post")\n    log.info("request.vars = %s",request.vars)\n\n    question_id = post_new_question(request, auth)\n    if question_id:\n        redirect(URL(r = request, f= \'article\', args = question_id))\n    return dict()\n\n\n@auth.requires_login()\ndef user_delete_question():\n    delete_a_question(request)\n    return dict()\n@auth.requires_login()\ndef user_modify_question():\n    update_a_question(request)\n    return dict()\n\n\n####### answer ######\n@auth.requires_login()\ndef user_post_new_answer():\n    create_new_answer(request, auth)\n    return dict()\n\n@auth.requires_login()\ndef user_update_an_answer():\n    update_an_answer(request)\n    return dict()\n@auth.requires_login()\ndef user_del_an_answer():\n    del_an_answer(request)\n    return dict()\n\n\n##############################\n@auth.requires_login()\ndef user_like_a_question():\n    like_a_question(request, auth)\n    return dict()\n\n@auth.requires_login()\ndef user_unlike_a_question():\n    unlike_a_question(request, auth)\n    return dict()\n\n\n\n\n\n\n#those code is for manage meta data not using right now\n# using flickr for photo uploading\n@auth.requires_login()\ndef show_image():\n\n    image_data = db(db.pic_store).select()\n    #image = image_data.pic\n\n    form = SQLFORM(db.pic_store)\n    if form.process().accepted:\n        response.flash = \'movie info is posted\'\n    return dict(form = form)\n@auth.requires_login()\ndef manage_image():\n    grid = SQLFORM.smartgrid(db.pic_store)\n    return dict(grid=grid)\n\n@auth.requires_login()\ndef manage_article_tag():\n    grid = SQLFORM.smartgrid(db.article_tag)\n    return dict(grid=grid)\nresponse._vars=response._caller(user)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/Users/mac/Documents/shareknowledge/gluon/restricted.py", line 217, in restricted\n    exec ccode in environment\n  File "/Users/mac/Documents/shareknowledge/applications/welcome/controllers/default.py", line 302, in <module>\n  File "/Users/mac/Documents/shareknowledge/gluon/globals.py", line 372, in <lambda>\n    self._caller = lambda f: f()\n  File "/Users/mac/Documents/shareknowledge/applications/welcome/controllers/default.py", line 53, in user\n    return dict(form = auth())\n  File "/Users/mac/Documents/shareknowledge/gluon/tools.py", line 1303, in __call__\n    return getattr(self, args[0])()\n  File "/Users/mac/Documents/shareknowledge/gluon/tools.py", line 2357, in login\n    cas_user = cas.get_user()\n  File "/Users/mac/Documents/shareknowledge/applications/welcome/models/db.py", line 171, in get_user\n    email = user[\'email\']\nKeyError: \'email\'\n'
p11
s.