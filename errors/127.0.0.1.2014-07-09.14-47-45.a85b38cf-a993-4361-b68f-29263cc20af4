(dp1
S'output'
p2
S"<type 'exceptions.AttributeError'> 'DIV' object has no attribute 'create_new_tag'"
p3
sS'layer'
p4
S'/Users/mac/Documents/shareknowledge/applications/welcome/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a samples controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n## - call exposes all registered services (none by default)\n#########################################################################\n\nimport json\nimport logging\nfrom database_handler import *\nfrom tag_handler import *\nfrom user_handler import *\n\nlog = logging.getLogger("h")\nlog.setLevel(logging.DEBUG)\n\nfrom ConstantDefinition import *\ntry:\n    import json\nexcept ImportError:\n    from gluon.contrib import simplejson as json\nfrom facebook import GraphAPI, GraphAPIError\nfrom gluon.contrib.login_methods.oauth20_account import OAuthAccount\n\n\n\ndef test_jquery():\n    import pdb; pdb.set_trace()\n    return dict()\ndef test_tinyMCE():\n    return dict()\n\ndef test_facebook():\n    return dict()\n\ndef create_new_tag():\n    if not request.vars.tag_info: return \'\'\n    tag_info = request.vars.tag_info.capitalize()\n    rst = tag_handler().create_new_tag(tag_info)\n    if rst:\n        return True\n    else:\n        return False\n\ndef tag_handler():\n    if not request.vars.tag_info: return \'\'\n    tag_info = request.vars.tag_info.capitalize()\n    selected = question_tag_handler().search_for_related_tag_in_tbl(tag_info)\n    #selected =[\'tag1\',\'tag2\', \'tag3\',\'tag4\']\n    #selected = [m for m in tag_list if m.name.startswith(tag_info)]\n    div_id = "suggestion_box"\n\n    if not len(selected):\n        temp = [DIV(\'t\xe1\xba\xa1o tag moi\',\n                    _onclick="user_post_new_tag(\'%s\',\'%s\');" %(tag_info, div_id),\n                    _onmouseover="this.style.backgroundColor=\'yellow\'",\n                    _onmouseout="this.style.backgroundColor=\'white\'"\n        )]\n    else:\n        temp = [DIV(k,\n                    _onclick="user_select_tag_handler(\'%s\',\'%s\');" %(k,div_id),\n                    _onmouseover="this.style.backgroundColor=\'yellow\'",\n                    _onmouseout="this.style.backgroundColor=\'white\'"\n        ) for k in selected]\n\n\n    return DIV(\n                temp, _id ="%s" % div_id\n                )\n\n\n\ndef user():\n    """\n    if request.env.REQUEST_METHOD ==\'POST\':\n        #save self introduction to db\n        update_self_introduction(request, auth)\n        redirect(URL(r = request, f= \'user\', args = \'profile\'))\n    if request.env.REQUEST_METHOD ==\'GET\':\n        if request.args[0] == \'login\':\n            return dict(form = auth())\n        profile_info = db(db.user_profile.user_info == auth.user.id).select().first()\n        return dict(user_profile = profile_info)\n    """\n    return dict(form = auth())\n\ndef user_profile():\n    if request.env.REQUEST_METHOD ==\'GET\':\n        target_person_id = request.vars.user_id\n        profile_info = db(db.user_profile.user_info == target_person_id).select().first()\n        user_info = db(db.auth_user.id == target_person_id).select().first()\n        try:\n            #if user is logged in\n            follow_record = db((db.follow_info_tbl.followed_user == target_person_id)&(db.follow_info_tbl.following_user == auth.user.id )).select().first()\n        except:\n            # not login\n            follow_record = False\n            pass\n        if follow_record:\n            follow_flag = True\n        else:\n            follow_flag = False\n        #following\n        following_list = db(db.follow_info_tbl.followed_user == target_person_id).select()\n        #followed\n        followed_list = db(db.follow_info_tbl.following_user == target_person_id).select()\n        return dict(person_profile = profile_info,\n                    person_info= user_info,\n                    follow_flag = follow_flag,\n                    following_list = followed_list,\n                    followed_list = followed_list)\n    return dict()\ndef update_profile():\n    import pdb;pdb.set_trace()\n    rst = update_self_introduction(request, auth)\n    if rst:\n        return True\n    else:\n        return False\ndef index():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n\n    if you need a simple wiki simple replace the two lines below with:\n    return auth.wiki()\n    """\n    #redirect(URL(r = request, f= \'blog\', args = 3))\n    return dict()\n\n\ndef question():\n    """\n    Display blog by id\n    """\n    if request.env.REQUEST_METHOD == \'POST\':\n        create_new_answer(request, auth)\n        redirect(URL(r = request, f= \'question\', args = request.vars.question_id))\n    elif request.env.REQUEST_METHOD == \'GET\':\n        question = None\n        answer_list = []\n        user_id =\'\'\n        try:\n            question = db(db.question_tbl.id == int(request.args[0])).select()[0]\n            user_info = db(db.auth_user.id == question.writer).select().first()\n            try:\n                answer_list = db(db.answer_tbl.question_id == question.id).select()\n            except:\n                log.error(\'cant query answer db\')\n        except:\n            log.error(\'cant query a question from db\')\n            question = None\n        #like list\n        like_list = db(db.question_like_tbl.question_id==question.id).select()\n        #related question list\n        related_question_list = db(db.question_tbl).select()\n        return dict(item = question,\n                    like_list = like_list,\n                    comment_list = answer_list,\n                    user_info = user_info,\n                    related_question_list = related_question_list)\n\n@auth.requires_login()\ndef edit_question():\n    """\n    Edit blog\n    """\n    log.info("edit question")\n    if request.env.REQUEST_METHOD == \'GET\':\n        question = db(db.question_tbl.id == request.args[0]).select()[0]\n        tag_list = question_tag_handler()._get_tag_list_of_a_question(request.args[0])\n        return dict(question = question , tag_list = tag_list)\n    elif request.env.REQUEST_METHOD == \'POST\':\n        update_a_question(request, session.tag_list_store)\n        redirect(URL(r = request, f= \'question\', args = [request.args[0]]))\n\n    return dict()\n\n@auth.requires_login()\ndef delete_question():\n    selection = request.vars\n    if selection[\'selection\'] == "YES":\n        delete_a_question(request)\n        redirect(URL(r = request, f= \'question_list\'))\n    elif selection[\'selection\'] == "NO":\n        redirect(URL(r = request, f= \'question\', args = [request.args[0]]))\n    return dict()\n\n\ndef create_data_for_question_list_for_test():\n    import pdb; pdb.set_trace()\n    user_record = db(db.auth_user).select().first()\n    if not user_record:\n        user_id =  db.auth_user.insert(first_name = \'first_user\', email = \'first_user_email@gmail.com\')\n    else:\n        user_id = user_record.id\n    auth.user = db(db.auth_user.id == user_id).select()[0]\n    for i in range(1,10,1):\n        question = "Lam sao de giai quyet duoc van de nay h troi oi " + str(i)\n        question_detail_info = """\n        \xc4\x90\xe1\xbb\x91i v\xe1\xbb\x9bi m\xe1\xbb\x99t l\xe1\xba\xadp tr\xc3\xacnh vi\xc3\xaan trong th\xe1\xba\xbf gi\xe1\xbb\x9bi c\xc3\xb4ng ngh\xe1\xbb\x87, c\xc3\xb3 m\xe1\xbb\x99t th\xe1\xbb\xa9 m\xc3\xa0 c\xc3\xb3 th\xe1\xbb\x83 k\xc3\xa9o ch\xc3\xbang ta ra kh\xe1\xbb\x8fi nh\xc3\xa0 v\xc3\xa0 \xc4\x91\xe1\xba\xbfn n\xc6\xa1i l\xc3\xa0m vi\xe1\xbb\x87c, \xc4\x91\xc3\xb3 l\xc3\xa0 ni\xe1\xbb\x81m vui v\xc3\xa0 \xc4\x91am m\xc3\xaa trong vi\xe1\xbb\x87c l\xe1\xba\xadp tr\xc3\xacnh. Nh\xc6\xb0ng \xc4\x91\xe1\xbb\x83 khi\xe1\xba\xbfn cho c\xc3\xb4ng vi\xe1\xbb\x87c th\xe1\xbb\xb1c s\xe1\xbb\xb1 vui v\xe1\xba\xbb v\xc3\xa0 c\xc3\xb3 th\xe1\xbb\x83 t\xe1\xba\xa1o ra m\xe1\xbb\x99t ni\xe1\xbb\x81m h\xe1\xbb\xa9ng kh\xe1\xbb\x9fi v\xc4\xa9nh c\xe1\xbb\xadu, ch\xc3\xbang ta c\xe1\xba\xa7n ph\xe1\xba\xa3i bi\xe1\xba\xbft nh\xe1\xbb\xafng \xc4\x91i\xe1\xbb\x81u c\xc4\x83n b\xe1\xba\xa3n \xc4\x91\xe1\xbb\x83 gi\xc3\xbap tr\xe1\xbb\x9f th\xc3\xa0nh m\xe1\xbb\x99t nh\xc3\xa0 l\xe1\xba\xadp tr\xc3\xacnh vi\xc3\xaan gi\xe1\xbb\x8fi. - See more at: http://toancauxanh.vn/news/technology/10-cach-hay-de-tro-thanh-mot-lap-trinh-vien-gioi#sthash.ZZ4aV4xY.dpufb\n         """+ str(i)\n        tag_list = ["tag1","tag2","tag3"]\n        question_id = question_handler().create_new_record_in_question_tbl(question, question_detail_info, user_id, tag_list)\n\ndef question_list():\n    """\n    test data\n    """\n    record = db(db.auth_user).select()\n\n    question_list = db(db.question_tbl).select()\n    if not len(question_list):\n        pass\n        #create_data_for_question_list_for_test()\n    """\n    end test data\n    """\n    items= []\n\n\n    try:\n        items = db(db.question_tbl).select()\n\n    except:\n        log.error(\'cant query data from db\')\n    return dict(items= items, audience_id = \'1\')\n\ndef get_header(text):\n    """\n        get header of article\n    """\n    header_position =text.find("<p>&nbsp;</p>")\n    log.info("header_position = %d", header_position)\n    header_text =  request.vars.editor1[:header_position]\n    return header_text\n\n\n\n\n\n@auth.requires_login()\ndef post():\n    log.info("request.vars = %s",request.vars)\n    return dict(article_tag_list ="" )\n\n\n\n\n@auth.requires_login()\ndef post_question():\n    log.info("post")\n    log.info("request.vars = %s",request.vars)\n    tag_info = request.vars.tag_list\n    tag_list = tag_info.split(\',\')\n    question_id = post_new_question(request, auth, tag_list)\n    if question_id:\n        redirect(URL(r = request, f= \'question\', args = question_id))\n    return dict()\n\n\n@auth.requires_login()\ndef user_modify_question():\n    update_a_question(request, session.tag_list_store)\n    return dict()\n\n\n####### answer ######\n@auth.requires_login()\ndef like_an_answer():\n    import pdb; pdb.set_trace()\n    user_like_an_answer(request, auth)\n    return \'unlike\'\n\ndef unlike_an_answer():\n    user_unlike_an_answer(request, auth)\n    return True\n\n@auth.requires_login()\ndef user_update_an_answer():\n    update_an_answer(request)\n    return dict()\n@auth.requires_login()\ndef user_del_an_answer():\n    del_an_answer(request)\n    return dict()\n\n\n##############################\n@auth.requires_login()\ndef like_a_question():\n    import pdb; pdb.set_trace()\n    user_like_a_question(request, auth)\n    return "unlike"\n\n@auth.requires_login()\ndef unlike_a_question():\n    user_unlike_a_question(request, auth)\n    return "like"\n\ndef report_a_question():\n    #user_report_a_question(request, auth)\n    return "reported"\n\n##############follow##########\n@auth.requires_login()\ndef follow_a_person():\n    rst = user_follow_a_person(request, auth)\n    if rst:\n        return "followed"\n    else:\n        return "error"\ndef unfollow_a_person():\n    rst = user_unfollow_a_person(request, auth)\n    if rst :\n        return "follow"\n    else:\n        return "error"\n\n\n#those code is for manage meta data not using right now\n# using flickr for photo uploading\n@auth.requires_login()\ndef show_image():\n\n    image_data = db(db.pic_store).select()\n    #image = image_data.pic\n\n    form = SQLFORM(db.pic_store)\n    if form.process().accepted:\n        response.flash = \'movie info is posted\'\n    return dict(form = form)\n@auth.requires_login()\ndef manage_image():\n    grid = SQLFORM.smartgrid(db.pic_store)\n    return dict(grid=grid)\n\n@auth.requires_login()\ndef manage_article_tag():\n    grid = SQLFORM.smartgrid(db.article_tag)\n    return dict(grid=grid)\nresponse._vars=response._caller(create_new_tag)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/Users/mac/Documents/shareknowledge/gluon/restricted.py", line 217, in restricted\n    exec ccode in environment\n  File "/Users/mac/Documents/shareknowledge/applications/welcome/controllers/default.py", line 346, in <module>\n  File "/Users/mac/Documents/shareknowledge/gluon/globals.py", line 372, in <lambda>\n    self._caller = lambda f: f()\n  File "/Users/mac/Documents/shareknowledge/applications/welcome/controllers/default.py", line 43, in create_new_tag\n    rst = tag_handler().create_new_tag(tag_info)\nAttributeError: \'DIV\' object has no attribute \'create_new_tag\'\n'
p11
s.